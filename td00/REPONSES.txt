EL HELW Sarah

td00-maven.pdf

Exercice 1 :

4) Je tape la commande mvn --version. Je constate que j'ai la version Apache Maven 3.6.3.

5) Le paramètre groupId identifie de façon unique notre projet parmi tous les autres projets.
Le paramètre artifactId est le nom du jar sans version.

6) Le répertoire target contient les répertoires classes, generated-sources et maven-status.

8) Le class path définit le chemin d'accès au répertoire où se trouvent les classes et packages Java à exécuter.

13) La propriété maven.compiler.target spécifie avec quelle JVM on veut que les classes compilées soient compatibles. On va lui donner la même valeur que pour la propriété maven.compiler.source (question 12).





Exercice 2 :


1) Un message s'affiche après exécution de la commande : 
		no main manifest attribute, in target/td00-1.0-SNAPSHOT.jar






Exercice 3 :


3) Eclipse fait un remplacement automatique avec System.out.println();

4) Eclipse suggère deux méthodes :
	- toString() : String
	- toStr() : void
   Il est intéressant ici de constater que la méthode toString() est suggérée.

5) Eclipse suggère : main - main method. En double cliquant dessus, Eclipse génère l'en-tête du main.

6) Eclipse suggère :
	- getToto() : int - Getter for 'toto'
	- get() : void - Method stub
	- GetField - java.io.ObjectInputStream
   Il est intéressant ici de constater que le getter getToto() du champ toto est suggéré.

7) Si on tape Alt+Shift+R, en sélectionnant:
	- le nom de la classe : la fenêtre "Open Resource" s'ouvre. En double cliquant sur AppTest.java, le fichier s'ouvre dans Eclipse.
	- le nom du champ toto : la fenêtre "Open Resource" s'ouvre.


8) Le fichier de documentation de la classe String s'ouvre dans Eclipse.








td00bis-git.pdf


Exercice 1 :

2) Les fichiers présents dans le répertoire td00 et qui ne font pas partie des sources du projet sont par exemple :
	- les répertoires .settings, target
	- les fichiers .classpath, .project

5) On observe l'affichage suivant sur la console :

diff --git a/td00/src/main/java/fr/dauphine/ja/ElHelwSarah/td00/PrimeCollection.java b/td00/src/main/java/fr/dauphine/ja/ElHelwSarah/td00/PrimeCollection.java
index 32ecc2b..542c986 100644
--- a/td00/src/main/java/fr/dauphine/ja/ElHelwSarah/td00/PrimeCollection.java
+++ b/td00/src/main/java/fr/dauphine/ja/ElHelwSarah/td00/PrimeCollection.java
@@ -36,7 +36,7 @@ public class PrimeCollection {

        public static void main(String[] args) {
                PrimeCollection pc = new PrimeCollection();
-               pc.initRandom(1, 1000);
+               pc.initRandom(1, 2000);

                pc.printPrimes();

Git nous indique donc que la modification effectuée a été un changement de 1000 à 2000 dans la borne supérieure du générateur aléatoire.




Exercice 2 :

3) gitk représente le fait que les deux dépôts sont synchronisés par le fait que la branche remotes/origin/master (du dépôt distant de GitHub) pointe sur la branche master (du dépôt local).

5) Après exécution de la commande, le message d'erreur suivant s'affiche :

To https://github.com/Dauphine-M1-Java-20/td00-Sarah-Elhelw.git
 ! [rejected]        master -> master (fetch first)
error: failed to push some refs to 'https://github.com/Dauphine-M1-Java-20/td00-Sarah-Elhelw.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

Ce message s'affiche car le dépôt local javaavance n'est pas à jour par rapport au dépôt distant, on ne peut donc pas faire de push. En effet, nous n'avons pas intégré sur le dépôt local javaavance le commit push par le dépôt local clone-de-javaavance.







Notes de la séance de TP du 17/09/2020 :


Exercice 1 :

7) Le fichier source responsable de l'affichage est dans le src/main.
Il faut relancer la compilation pour voir s'afficher "Bonjour!".


Exercice 2 :

1) Le fichier .jar est td00-1.0-SNAPSHOT.

   Il faut ajouter .jar au nom du fichier JAR.

4) On relance avec mvn package.


Exercice 3 :

8) Il faut se rendre dans C:\Program Files\Java\jdk-13.0.2\lib. 
   Se rendre ensuite sur Eclipse pour Window/Preferences...
   Dans le src.zip, on trouve les classes que l'on peut utiliser en java.